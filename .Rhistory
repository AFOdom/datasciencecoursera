outcome_raw <- read.csv("outcome-of-care-measures.csv",
colClasses="character")
#whittle data down to what we want
df_raw <- data.frame(state_name=outcome_raw[,7],
hospital=outcome_raw[,2],
heart_attack=outcome_raw[,11],
heart_failure=outcome_raw[,17],
pneumonia=outcome_raw[,23])
df_raw_NA <- sapply(df_raw,function(x) {
is.na(x)<-which(x=="Not Available");x})
df_raw_clean <- na.omit(df_raw_NA)
df_raw_coerced <- data.frame(df_raw_clean,
stringsAsFactors = FALSE)
df_raw <- df_raw_coerced[
order(df_raw_coerced$state_name),]
return(df_raw)
}
rankall("heart attack")
test <- rankall("heart attack")
head(test)
testframe <- existingDF <- as.data.frame(matrix(seq(20),nrow=5,ncol=4))
testframe
newrow = c(1:4)
existingDF <- rbind(exisitingDF, newrow)
testframe = rbind(testframe,newrow)
testframe
rankall <- function(outcome,num) {
## Read outcome data
outcome_raw <- read.csv("outcome-of-care-measures.csv",
colClasses="character")
#whittle data down to what we want
df_raw <- data.frame(state_name=outcome_raw[,7],
hospital=outcome_raw[,2],
heart_attack=outcome_raw[,11],
heart_failure=outcome_raw[,17],
pneumonia=outcome_raw[,23])
df_raw_NA <- sapply(df_raw,function(x) {
is.na(x)<-which(x=="Not Available");x})
df_raw_clean <- na.omit(df_raw_NA)
df_raw_coerced <- data.frame(df_raw_clean,
stringsAsFactors = FALSE)
df_raw <- df_raw_coerced[
order(df_raw_coerced$state_name),]
urk <- sapply(df_raw, function(x) unique(df_raw$state_name))
return(urk)
hospitals <- NULL
return(df_raw)
}
test <- rankall("heart attack")
head(test)
rankall <- function(outcome,num) {
## Read outcome data
outcome_raw <- read.csv("outcome-of-care-measures.csv",
colClasses="character")
#whittle data down to what we want
df_raw <- data.frame(state_name=outcome_raw[,7],
hospital=outcome_raw[,2],
heart_attack=outcome_raw[,11],
heart_failure=outcome_raw[,17],
pneumonia=outcome_raw[,23])
df_raw_NA <- sapply(df_raw,function(x) {
is.na(x)<-which(x=="Not Available");x})
df_raw_clean <- na.omit(df_raw_NA)
df_raw_coerced <- data.frame(df_raw_clean,
stringsAsFactors = FALSE)
df_raw <- df_raw_coerced[
order(df_raw_coerced$state_name),]
urk <- sapply(df_raw, function(x) df_raw))
return(urk)
hospitals <- NULL
return(df_raw)
}
rankall <- function(outcome,num) {
## Read outcome data
outcome_raw <- read.csv("outcome-of-care-measures.csv",
colClasses="character")
#whittle data down to what we want
df_raw <- data.frame(state_name=outcome_raw[,7],
hospital=outcome_raw[,2],
heart_attack=outcome_raw[,11],
heart_failure=outcome_raw[,17],
pneumonia=outcome_raw[,23])
df_raw_NA <- sapply(df_raw,function(x) {
is.na(x)<-which(x=="Not Available");x})
df_raw_clean <- na.omit(df_raw_NA)
df_raw_coerced <- data.frame(df_raw_clean,
stringsAsFactors = FALSE)
df_raw <- df_raw_coerced[
order(df_raw_coerced$state_name),]
urk <- sapply(df_raw, function(x) df_raw)
return(urk)
hospitals <- NULL
return(df_raw)
}
test <- rankall("heart attack")
head(test)
rankall <- function(outcome,num) {
## Read outcome data
outcome_raw <- read.csv("outcome-of-care-measures.csv",
colClasses="character")
#whittle data down to what we want
df_raw <- data.frame(state_name=outcome_raw[,7],
hospital=outcome_raw[,2],
heart_attack=outcome_raw[,11],
heart_failure=outcome_raw[,17],
pneumonia=outcome_raw[,23])
df_raw_NA <- sapply(df_raw,function(x) {
is.na(x)<-which(x=="Not Available");x})
df_raw_clean <- na.omit(df_raw_NA)
df_raw_coerced <- data.frame(df_raw_clean,
stringsAsFactors = FALSE)
df_raw <- df_raw_coerced[
order(df_raw_coerced$state_name),]
urk <- sapply(df_raw, function(x) c(df_raw$state_name,df_raw$hospital))
return(urk)
hospitals <- NULL
return(df_raw)
}
test <- rankall("heart attack")
head(test)
rankall <- function(outcome,num) {
## Read outcome data
outcome_raw <- read.csv("outcome-of-care-measures.csv",
colClasses="character")
#whittle data down to what we want
df_raw <- data.frame(state_name=outcome_raw[,7],
hospital=outcome_raw[,2],
heart_attack=outcome_raw[,11],
heart_failure=outcome_raw[,17],
pneumonia=outcome_raw[,23])
df_raw_NA <- sapply(df_raw,function(x) {
is.na(x)<-which(x=="Not Available");x})
df_raw_clean <- na.omit(df_raw_NA)
df_raw_coerced <- data.frame(df_raw_clean,
stringsAsFactors = FALSE)
df_raw <- df_raw_coerced[
order(df_raw_coerced$state_name),]
urk <- sapply(df_raw)
return(urk)
hospitals <- NULL
return(df_raw)
}
test <- rankall("heart attack")
rankall <- function(outcome,num) {
## Read outcome data
outcome_raw <- read.csv("outcome-of-care-measures.csv",
colClasses="character")
#whittle data down to what we want
df_raw <- data.frame(state_name=outcome_raw[,7],
hospital=outcome_raw[,2],
heart_attack=outcome_raw[,11],
heart_failure=outcome_raw[,17],
pneumonia=outcome_raw[,23])
df_raw_NA <- sapply(df_raw,function(x) {
is.na(x)<-which(x=="Not Available");x})
df_raw_clean <- na.omit(df_raw_NA)
df_raw_coerced <- data.frame(df_raw_clean,
stringsAsFactors = FALSE)
df_raw <- df_raw_coerced[
order(df_raw_coerced$state_name),]
urk <- split(df_raw,df$state_names)
return(urk)
hospitals <- NULL
return(df_raw)
}
test <- rankall("heart attack")
rankall <- function(outcome,num) {
## Read outcome data
outcome_raw <- read.csv("outcome-of-care-measures.csv",
colClasses="character")
#whittle data down to what we want
df_raw <- data.frame(state_name=outcome_raw[,7],
hospital=outcome_raw[,2],
heart_attack=outcome_raw[,11],
heart_failure=outcome_raw[,17],
pneumonia=outcome_raw[,23])
df_raw_NA <- sapply(df_raw,function(x) {
is.na(x)<-which(x=="Not Available");x})
df_raw_clean <- na.omit(df_raw_NA)
df_raw_coerced <- data.frame(df_raw_clean,
stringsAsFactors = FALSE)
df_raw <- df_raw_coerced[
order(df_raw_coerced$state_name),]
urk <- split(df_raw,state_names)
return(urk)
hospitals <- NULL
return(df_raw)
}
test <- rankall("heart attack")
rankall <- function(outcome,num) {
## Read outcome data
outcome_raw <- read.csv("outcome-of-care-measures.csv",
colClasses="character")
#whittle data down to what we want
df_raw <- data.frame(state_name=outcome_raw[,7],
hospital=outcome_raw[,2],
heart_attack=outcome_raw[,11],
heart_failure=outcome_raw[,17],
pneumonia=outcome_raw[,23])
df_raw_NA <- sapply(df_raw,function(x) {
is.na(x)<-which(x=="Not Available");x})
df_raw_clean <- na.omit(df_raw_NA)
df_raw_coerced <- data.frame(df_raw_clean,
stringsAsFactors = FALSE)
df_raw <- df_raw_coerced[
order(df_raw_coerced$state_name),]
urk <- split(df_raw,df_raw$state_names)
return(urk)
hospitals <- NULL
return(df_raw)
}
test <- rankall("heart attack")
fileurl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml"
doc <- xmlTreeParse(fileurl,useInternal=TRUE)
library(XML)
doc <- xmlTreeParse(fileurl,useInternal=TRUE)
fileurl <- "http://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml"
doc <- xmlTreeParse(fileurl,useInternal=TRUE)
rootNode <- xmlRoot(doc)
xmlName(rootnode)
xmlName(rootNode)
xpathSApply(rootNode,"//zipcode[@zipcode='21231']",xmlValue)
zipcodes <- xpathSApply(rootNode,"//zipcode[@zipcode='21231']",xmlValue)
zipcodes
zipcodes <- xpathSApply(rootNode,"//zipcode[@zipcode=21231]",xmlValue)
zipcodes
xpathSApply(rootNode,"//zipcode",xmlValue)
zipcodes <- xpathSApply(rootNode,"//row[@zipcode=21231]",xmlValue)
zipcodes
xpathSApply(rootNode,"//row[@zipcode=21231]",xmlValue)
xpathSApply(rootNode,"//row[@zipcode='21231']",xmlValue)
xpathSApply(rootNode,"//zipcode",xmlValue)
xpathSApply(doc,"//row[@zipcode='21231']",xmlValue)
xpathSApply(rootNode,"//zipcode",xmlValue)
zipcodes <- xpathSApply(rootNode,"//zipcode",xmlValue)
zipcodes
names(zipcodes)
name(zipcodes)
sort(zipcodes)
q5fileurl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv"
download.file(q5fileURL,"q5idaho_housing.csv",method="curl")
download.file(q5fileurl,"q5idaho_housing.csv",method="curl")
DT <- fread("q5idaho_housing.csv"")
s
""
DT <- fread("q5idaho_housing.csv)
""
DT <- fread("q5idaho_housing.csv)
DT <- fread("q5idaho_housing.csv")
library(data.table)
DT <- fread("q5idaho_housing.csv")
system.time(DT[,mean(pwgtp15),by=SEX])
sytem.time(tapply(DT$pwgtp15,DT$SEX,mean))
system.time(tapply(DT$pwgtp15,DT$SEX,mean))
system.time(rowMeans(DT)[DT$SEX==1]; rowMeans(DT)[DT$SEX==2])
system.time(mean(DT[DT$SEX==1,]$pwgtp15); mean(DT[DT$SEX==2,]$pwgtp15))
system.time(rowMeans(DT)[DT$SEX==1], rowMeans(DT)[DT$SEX==2])
system.time(mean(DT[DT$SEX==1,]$pwgtp15), mean(DT[DT$SEX==2,]$pwgtp15))
system.time(sapply(split(DT$pwgtp15,DT$SEX),mean))
system.time(mean(DT$pwgtp15,by=DT$SEX))
system.time(mean(DT$pwgtp15,by=DT$SEX))
mean(DT$pwgtp15,by=DT$SEX)
install.packages("RMySQL")
install.packages("RMySQL")
install.packages("RMySQL", type="source")
install.packages("RMySQL", type="source")
install.packages("RMySQL", type="source")
library(RMySQL)
ucscDb <- dbConnect(MySQL(), user="genome",host="genome-mysql.cse.ucsc.edu")
result <- dbGetQuery(ucscDB,"show databases;"); dbDisconnect();
hg19 <- dbConnect(MySQL(), user="genome", db="hg19", host="genome-mysql.cse.ucsc.edu")
allTables <- dbListTables(hg19)
length(allTables)
allTables[1:5]
exit
source("http://bioconductor.org/biocLite.R")
biocLite("rhdf5")
library(rhdf5)
created = h5createFile("example.h5")
created
created = h5createGroup("example.h5","foo")
created = h5createGroup("example.h5","baa")
created = h5createGroup("example.h5","foo/foobaa
")
h5ls("example.h5")
con = (url"http://scholar.google.com/citations?user=HI-I6C0AAAAJ&hl=en")
con = url("http://scholar.google.com/citations?user=HI-I6C0AAAAJ&hl=en")
htmlCode=readLines(con)
close(con)
htmlCOde
htmlCode
library(XML)
library(httr);
html2=GET(url)
url = url("http://scholar.google.com/citations?user=HI-I6C0AAAAJ&hl=en")
html2=GET(url)
html2 = GET("http://scholar.google.com/citations?user=HI-I6C0AAAAJ&hl=en")
content2 = content(html2,as="text")
parsedHTML = htmlParse(content2,asText=TRUE)
parsedHTML
xpathSApply(parsedHTML,"//title",xmlValue)
html2 = GET("http://scholar.google.com/citations?user=HI-I6C0AAAAJ&hl=en")
install("sqldf")
install.packages("sqldf")
library("sqldf")
acs <- read.csv.sql("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv")
library(RMySQL)
acs <- read.csv.sql("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv")
acs <- read.csv2.sql("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv")
q4html = GET("http://biostat.jhsph.edu/~jleek/contact.html ")
q4content = content(q4html, as="test")
q4content = content(q4html, as="text")
q4content
parsedq4 = htmlParse(content2, asText=TRUE)
parsedq4
readlines ??
;
exit
quit
readlines ??
;
quit
quit
exit
quit mysql
cd
?readlines
??readlines
q4html = readlines(con = "http://biostat.jhsph.edu/~jleek/contact.html", n=10)
q4html = readLines(con = "http://biostat.jhsph.edu/~jleek/contact.html", n=10)
g4html
q4html
q4html[10]
nchar(q4html[10])
q4html = readLines(con = "http://biostat.jhsph.edu/~jleek/contact.html", n=100)
nchar(q4html[20])
nchar(q4html[30])
nchar(q4html[100])
q5data = GET("https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for")
q5data
q5data[4]
q5data
q5data[,4]
names(q5data)
q5data[,4,]
q5data = GET("http://www.cpc.ncep.noaa.gov/data/indices/wksst8110.for ")
head(q5data)
head.q5data
q5data(head)
q5data = GET("https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for")
q5data
q5data$SST
q5data$Nino3
q5data = read.fortran("https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for")
q5data = read.fwf("https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for")
??read.fwf()
q5data = read.fwf("https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for",10)
q5data = read.fwf("http://www.cpc.ncep.noaa.gov/data/indices/wksst8110.for",10)
q5data
head(q5data)
q5data = read.fwf("https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for",10)
q5data = read.fwf("http://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for",10)
head(q5data)
q5data = read.fwf("http://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for",widths = 10)
head(q5data)
q5data = read.fwf("http://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for",c(10,10,10,10)
)
head(q5data)
q5data = read.fwf("http://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for",c(10,50,50,50)
)
head(q5data)
q5data = read.fwf("http://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for",c(9,4,4,4)
)
head(q5data)
q5data = read.fwf("http://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for",c(10,8,4,4))
head(q5data)
q5data = read.fwf("http://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for",c(10,9,4,4))
head(q5data)
q5data = read.fwf("http://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for",c(10,9,4,9))
head(q5data)
q5data[,4]
head(q5data[,4])
colsums(q5data[,4])
colSums(q5data[,4])
??colSums()
colSums(q5data)
names(qdata[.4])
names(q5data[,4])
head(q5data)
sum(q5data$V4)
q5data = read.fwf("http://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for",c(10,9,4,9),headers=FALSE)
q5data = read.fwf("http://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for",c(10,9,4,9),header=FALSE)
head(q5data)
q5data$V4
q5data = q5data[-1,]
head(q5data)
q5data = q5data[-2,]
head(q5data)
q5data = q5data[-3,]
head(q5data)
q5data = q5data[-4,]
head(q5data)
sum(q5data$V4)
head(q5data)
q5data = q5data[-1,]
head(q5data)
q5data = q5data[-1,]
head(q5data)
sum(q5data$V4)
sapply(q5data[4], as.numeric)
sum(q5data$V4)
sum(sapply(q5data[4], as.numeric))
myapp = oauth_app("github","1c92362a1e998c590c6c54252833b3370bfa9f9d")
myapp = oauth_app("github","AFOdom",1c92362a1e998c590c6c54252833b3370bfa9f9d")
myapp = oauth_app("github","AFOdom","1c92362a1e998c590c6c54252833b3370bfa9f9d")
req <- GET("https://api.github.com/users/jtleek/repos")
head(req)
req <- GET("https://api.github.com/users/jtleek/repos")
req <- GET("https://api.github.com/users/jtleek/repos", myapp)
pat = "1c92362a1e998c590c6c54252833b3370bfa9f9d"
req <- GET("https://api.github.com/users/jtleek/repos",pat)
req = GET("https://api.github.com/users/jtleek/repos",pat)
req <- GET("https://api.github.com/users/jtleek/repos")
json1 = content(req)
install jsonlite
install.packages("jsonlite")
library jsonlite
library("jsonlite")
json1 = content(req)
json2 = jsonlite::fromJSON(toJSON(json1))
json[1,1:4]
json2[1,1:4]
head(json2)
names(json2)
head(json2$created_at)
head(json2$name)
json2[[5]]
head(json2$name)
json2$datasharing
json2$id
json2$datasharing
names(json2)
json2$name
json2$name$datasharing
names(json2)
names(json2$name)
names(json2$id)
head(json2$name)
json2[json2$name == "datasharing"]
head(json2[json2$name == "datasharing"])
head(json2[json2$name == "datasharing",])
head(json2[json2$name == "datasharing",])
json2[json2$name == "datasharing",]
head(q5data)
colSums(q5data$V4)
colSums(q5data)
colSums(sapply(q5data, as.numeric))
q5data = read.fwf("http://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for",c(15,9,4,9),header=FALSE)
head(q5data)
q5data[-1,]
q5data = q5data[-1,]
head(q5data)
q5data = q5data[-1,]
head(q5data)
q5data = q5data[-1,]
q5data = q5data[-1,]
head(q5data)
q5data = read.fwf("http://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for",c(15,4,9,4),header=FALSE)
head(q5data)
q5data = q5data[-1,]
q5data = q5data[-1,]
q5data = q5data[-1,]
q5data = q5data[-1,]
head(q5data)
colSums(sapply(q5data, as.numeric))
q5data = read.fwf("http://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for",c(10,5,4,4),header=FALSE)
head(q5data)
q5data = q5data[-1,]
q5data = q5data[-1,]
q5data = q5data[-1,]
q5data = q5data[-1,]
head(q5data)
colSums(sapply(q5data, as.numeric))
q5data = read.fwf("http://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for",c(10,5,4,4,5,4,4,5,4,4,5,4,4),header=FALSE)
head(q5data)
q5data = q5data[-1,]
q5data = q5data[-1,]
q5data = q5data[-1,]
q5data = q5data[-1,]
head(q5data)
colSums(sapply(q5data, as.numeric))
q5data = read.fwf("http://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for",c(10,5,4,4,5,4,4,5,4,4,5,4,4))
head(q5data)
colSums(sapply(q5data, as.numeric))
q5data = q5data[-1,]
q5data = q5data[-1,]
q5data = q5data[-1,]
q5data = q5data[-1,]
head(q5data)
colSums(sapply(q5data, as.numeric))
q5data = read.fwf("http://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for",c(-1,9,-5,4,4,-5,4,4,-5,4,4,-5,4,4))
head(q5data)
q5data = q5data[-1,]
q5data = q5data[-1,]
q5data = q5data[-1,]
q5data = q5data[-1,]
head(q5data)
colSums(sapply(q5data, as.numeric))
tail(q5data)
head(q5data)
tail(q5data)
sum(sapply(q5data$V4, as.numeric))
