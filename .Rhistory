## complete cases
complete_cases <- monitor_data[complete_test,]
this_correlation <-cor(complete_cases["sulfate"],
complete_cases["nitrate"])
#                         correlations <- append(correlations,
#                                                format(
#                                                    round(this_correlation,5),
#                                                         nsmall=5))
correlations <- append(correlations,
cor(complete_cases["sulfate"],
complete_cases["nitrate"]))
#print(correlations)
}
}
for (i in length(correlations)){
print (paste("Before rounding, correlation",i,"is",
correlation[i], sep =" "))
correlations[i]=format(round(correlations[i],5), nsmall=5)
print (paste("After rounding, correlation",i,"is",
correlation[i], sep=" "))
}
correlations
}
corr("specdata", 150)
corr <- function(directory, threshold = 0) {
correlations <- c()
all_complete_cases <- complete("specdata")
#print(all_complete_cases)
just_nobs <- all_complete_cases[,"nobs"]
#print("all of just nobs is:")
#print(just_nobs)
for (i in 1:332){
current_case <- all_complete_cases[i,]
threshold_test_number <- current_case["nobs"]
#                 print(paste("# complete cases id", i, "is",
#                             threshold_test_number,sep=" "))
#print (paste("i is", i, sep=" "))
#print (paste("just_nobs is",just_nobs[i], sep=" "))
if (threshold_test_number > threshold){
#print("in the if statement")
## Convert id# to 3 digit string with preceding zeros
filename <- sprintf("%03d.csv",i)
## Combine directory and filename to get complete filename
long_filename <- paste(directory,filename,sep="/")
## Read data from relevant monitor file into table
monitor_data <- read.table(long_filename,
header=TRUE,",")
## Create logical vector indicating which cases are complete
complete_test <- complete.cases(monitor_data)
## use logical vector to create data frame containing only
## complete cases
complete_cases <- monitor_data[complete_test,]
this_correlation <-cor(complete_cases["sulfate"],
complete_cases["nitrate"])
#                         correlations <- append(correlations,
#                                                format(
#                                                    round(this_correlation,5),
#                                                         nsmall=5))
correlations <- append(correlations,
cor(complete_cases["sulfate"],
complete_cases["nitrate"]))
#print(correlations)
}
}
for (i in length(correlations)){
print (paste("Before rounding, correlations",i,"is",
correlations[i], sep =" "))
correlations[i]=format(round(correlations[i],5), nsmall=5)
print (paste("After rounding, correlation",i,"is",
correlations[i], sep=" "))
}
correlations
}
corr("specdata", 150)
corr <- function(directory, threshold = 0) {
correlations <- c()
all_complete_cases <- complete("specdata")
#print(all_complete_cases)
just_nobs <- all_complete_cases[,"nobs"]
#print("all of just nobs is:")
#print(just_nobs)
for (i in 1:332){
current_case <- all_complete_cases[i,]
threshold_test_number <- current_case["nobs"]
#                 print(paste("# complete cases id", i, "is",
#                             threshold_test_number,sep=" "))
#print (paste("i is", i, sep=" "))
#print (paste("just_nobs is",just_nobs[i], sep=" "))
if (threshold_test_number > threshold){
#print("in the if statement")
## Convert id# to 3 digit string with preceding zeros
filename <- sprintf("%03d.csv",i)
## Combine directory and filename to get complete filename
long_filename <- paste(directory,filename,sep="/")
## Read data from relevant monitor file into table
monitor_data <- read.table(long_filename,
header=TRUE,",")
## Create logical vector indicating which cases are complete
complete_test <- complete.cases(monitor_data)
## use logical vector to create data frame containing only
## complete cases
complete_cases <- monitor_data[complete_test,]
this_correlation <-cor(complete_cases["sulfate"],
complete_cases["nitrate"])
#                         correlations <- append(correlations,
#                                                format(
#                                                    round(this_correlation,5),
#                                                         nsmall=5))
correlations <- append(correlations,
cor(complete_cases["sulfate"],
complete_cases["nitrate"]))
#print(correlations)
}
}
for (i in 1:(length(correlations)){
print (paste("Before rounding, correlations",i,"is",
correlations[i], sep =" "))
correlations[i]=format(round(correlations[i],5), nsmall=5)
print (paste("After rounding, correlation",i,"is",
correlations[i], sep=" "))
}
correlations
}
corr <- function(directory, threshold = 0) {
correlations <- c()
all_complete_cases <- complete("specdata")
#print(all_complete_cases)
just_nobs <- all_complete_cases[,"nobs"]
#print("all of just nobs is:")
#print(just_nobs)
for (i in 1:332){
current_case <- all_complete_cases[i,]
threshold_test_number <- current_case["nobs"]
#                 print(paste("# complete cases id", i, "is",
#                             threshold_test_number,sep=" "))
#print (paste("i is", i, sep=" "))
#print (paste("just_nobs is",just_nobs[i], sep=" "))
if (threshold_test_number > threshold){
#print("in the if statement")
## Convert id# to 3 digit string with preceding zeros
filename <- sprintf("%03d.csv",i)
## Combine directory and filename to get complete filename
long_filename <- paste(directory,filename,sep="/")
## Read data from relevant monitor file into table
monitor_data <- read.table(long_filename,
header=TRUE,",")
## Create logical vector indicating which cases are complete
complete_test <- complete.cases(monitor_data)
## use logical vector to create data frame containing only
## complete cases
complete_cases <- monitor_data[complete_test,]
this_correlation <-cor(complete_cases["sulfate"],
complete_cases["nitrate"])
#                         correlations <- append(correlations,
#                                                format(
#                                                    round(this_correlation,5),
#                                                         nsmall=5))
correlations <- append(correlations,
cor(complete_cases["sulfate"],
complete_cases["nitrate"]))
#print(correlations)
}
}
for (i in 1:(length(correlations))){
print (paste("Before rounding, correlations",i,"is",
correlations[i], sep =" "))
correlations[i]=format(round(correlations[i],5), nsmall=5)
print (paste("After rounding, correlation",i,"is",
correlations[i], sep=" "))
}
correlations
}
corr("specdata", 150)
corr <- function(directory, threshold = 0) {
correlations <- c()
all_complete_cases <- complete("specdata")
#print(all_complete_cases)
just_nobs <- all_complete_cases[,"nobs"]
#print("all of just nobs is:")
#print(just_nobs)
for (i in 1:332){
current_case <- all_complete_cases[i,]
threshold_test_number <- current_case["nobs"]
#                 print(paste("# complete cases id", i, "is",
#                             threshold_test_number,sep=" "))
#print (paste("i is", i, sep=" "))
#print (paste("just_nobs is",just_nobs[i], sep=" "))
if (threshold_test_number > threshold){
#print("in the if statement")
## Convert id# to 3 digit string with preceding zeros
filename <- sprintf("%03d.csv",i)
## Combine directory and filename to get complete filename
long_filename <- paste(directory,filename,sep="/")
## Read data from relevant monitor file into table
monitor_data <- read.table(long_filename,
header=TRUE,",")
## Create logical vector indicating which cases are complete
complete_test <- complete.cases(monitor_data)
## use logical vector to create data frame containing only
## complete cases
complete_cases <- monitor_data[complete_test,]
this_correlation <-cor(complete_cases["sulfate"],
complete_cases["nitrate"])
#                         correlations <- append(correlations,
#                                                format(
#                                                    round(this_correlation,5),
#                                                         nsmall=5))
correlations <- append(correlations,
cor(complete_cases["sulfate"],
complete_cases["nitrate"]))
#print(correlations)
}
}
for (i in 1:(length(correlations))){
print (paste("Before rounding, correlations",i,"is",
correlations[i], sep =" "))
print(class(correlations[i]))
correlations[i]=format(round(correlations[i],5), nsmall=5)
print (paste("After rounding, correlation",i,"is",
correlations[i], sep=" "))
}
correlations
}
corr("specdata", 150)
corr <- function(directory, threshold = 0) {
correlations <- c()
all_complete_cases <- complete("specdata")
#print(all_complete_cases)
just_nobs <- all_complete_cases[,"nobs"]
#print("all of just nobs is:")
#print(just_nobs)
for (i in 1:332){
current_case <- all_complete_cases[i,]
threshold_test_number <- current_case["nobs"]
#                 print(paste("# complete cases id", i, "is",
#                             threshold_test_number,sep=" "))
#print (paste("i is", i, sep=" "))
#print (paste("just_nobs is",just_nobs[i], sep=" "))
if (threshold_test_number > threshold){
#print("in the if statement")
## Convert id# to 3 digit string with preceding zeros
filename <- sprintf("%03d.csv",i)
## Combine directory and filename to get complete filename
long_filename <- paste(directory,filename,sep="/")
## Read data from relevant monitor file into table
monitor_data <- read.table(long_filename,
header=TRUE,",")
## Create logical vector indicating which cases are complete
complete_test <- complete.cases(monitor_data)
## use logical vector to create data frame containing only
## complete cases
complete_cases <- monitor_data[complete_test,]
this_correlation <-cor(complete_cases["sulfate"],
complete_cases["nitrate"])
#                         correlations <- append(correlations,
#                                                format(
#                                                    round(this_correlation,5),
#                                                         nsmall=5))
correlations <- append(correlations,
cor(complete_cases["sulfate"],
complete_cases["nitrate"]))
#print(correlations)
}
}
for (i in 1:(length(correlations))){
print (paste("Before rounding, correlations",i,"is",
correlations[i], sep =" "))
print(class(correlations[i]))
correlations[i]=format(round(as.numeric(correlations[i]),5), nsmall=5)
print (paste("After rounding, correlation",i,"is",
correlations[i], sep=" "))
}
correlations
}
corr("specdata", 150)
cr <- corr("specdata", 150)
summary (cr)
corr <- function(directory, threshold = 0) {
correlations <- c()
all_complete_cases <- complete("specdata")
#print(all_complete_cases)
just_nobs <- all_complete_cases[,"nobs"]
#print("all of just nobs is:")
#print(just_nobs)
for (i in 1:332){
current_case <- all_complete_cases[i,]
threshold_test_number <- current_case["nobs"]
#                 print(paste("# complete cases id", i, "is",
#                             threshold_test_number,sep=" "))
#print (paste("i is", i, sep=" "))
#print (paste("just_nobs is",just_nobs[i], sep=" "))
if (threshold_test_number > threshold){
#print("in the if statement")
## Convert id# to 3 digit string with preceding zeros
filename <- sprintf("%03d.csv",i)
## Combine directory and filename to get complete filename
long_filename <- paste(directory,filename,sep="/")
## Read data from relevant monitor file into table
monitor_data <- read.table(long_filename,
header=TRUE,",")
## Create logical vector indicating which cases are complete
complete_test <- complete.cases(monitor_data)
## use logical vector to create data frame containing only
## complete cases
complete_cases <- monitor_data[complete_test,]
this_correlation <-cor(complete_cases["sulfate"],
complete_cases["nitrate"])
#                         correlations <- append(correlations,
#                                                format(
#                                                    round(this_correlation,5),
#                                                         nsmall=5))
correlations <- append(correlations,
cor(complete_cases["sulfate"],
complete_cases["nitrate"]))
#print(correlations)
}
}
for (i in 1:(length(correlations))){
print (paste("Before rounding, correlations",i,"is",
correlations[i], sep =" "))
print(class(correlations[i]))
correlations[i]=as.numeric(format(round(
as.numeric(correlations[i]),5), nsmall=5))
print (paste("After rounding, correlation",i,"is",
correlations[i], sep=" "))
}
correlations
}
cr <- corr("specdata", 150)
summary (cr)
head (cr)
summary(cr)
submit()
submit()
submit()
corr <- function(directory, threshold = 0) {
correlations <- c()
all_complete_cases <- complete("specdata")
#print(all_complete_cases)
just_nobs <- all_complete_cases[,"nobs"]
#print("all of just nobs is:")
#print(just_nobs)
for (i in 1:332){
current_case <- all_complete_cases[i,]
threshold_test_number <- current_case["nobs"]
#                 print(paste("# complete cases id", i, "is",
#                             threshold_test_number,sep=" "))
#print (paste("i is", i, sep=" "))
#print (paste("just_nobs is",just_nobs[i], sep=" "))
if (threshold_test_number > threshold){
#print("in the if statement")
## Convert id# to 3 digit string with preceding zeros
filename <- sprintf("%03d.csv",i)
## Combine directory and filename to get complete filename
long_filename <- paste(directory,filename,sep="/")
## Read data from relevant monitor file into table
monitor_data <- read.table(long_filename,
header=TRUE,",")
## Create logical vector indicating which cases are complete
complete_test <- complete.cases(monitor_data)
## use logical vector to create data frame containing only
## complete cases
complete_cases <- monitor_data[complete_test,]
this_correlation <-cor(complete_cases["sulfate"],
complete_cases["nitrate"])
#                         correlations <- append(correlations,
#                                                format(
#                                                    round(this_correlation,5),
#                                                         nsmall=5))
correlations <- append(correlations,
cor(complete_cases["sulfate"],
complete_cases["nitrate"]))
}
}
correlations
}
cr <- corr("specdata", 150)
head(cr)
summary(cr)
submit()
sumbit()
sumbit()
submit()
submit()
corr <- function(directory, threshold = 0) {
correlations <- c() #vector to hold correlation calculations
#dataframe holding number of complete cases for each monitor ID
all_complete_cases <- complete("specdata")
#For all monitors, take the ones that have a number of complete
#cases above the threshold, calculate correlations between
#nitrate and sulfate, and append them to the correlations vector
for (i in 1:332){
#take the current monitor and get the number of complete cases
#for that monitor
current_monitor <- all_complete_cases[i,]
threshold_test_number <- current_monitor["nobs"]
if (threshold_test_number > threshold){
## Convert id# to 3 digit string with preceding zeros
filename <- sprintf("%03d.csv",i)
## Combine directory & filename to get cmplte filename
long_filename <- paste(directory,filename,sep="/")
## Read data from relevant monitor file into table
monitor_data <- read.table(long_filename,
header=TRUE,",")
## Logical vector indicating which cases are complete
complete_test <- complete.cases(monitor_data)
## use logical vector to create data frame containing
## only complete cases
complete_cases <- monitor_data[complete_test,]
## Take correlation of nitrate and sulfate for
## all complete cases and append them to correlations
## vector
correlations <- append(correlations,
cor(complete_cases["sulfate"],
complete_cases["nitrate"]))
}
}
correlations
}
cr <- corr("specdata", 150)
head(cr)
summary(cr)
submit()
submit()
submit()
source('~/.active-rstudio-document')
cube <- function (x,n){x^3}
cube(3)
f <- function(x) {
g <- function(y) {
y + z
}
z <- 4
x + g(x)
}
z <- 10
f(3)
printmessage <- function (x) {
if (x>0)
print ("x is greater than zero")
else
print("x is less than or equal to zero")
invisible(x) #doesn't print function's return value
# to the console
}
printmessage(1)
printmessage(NA)
library(datasets)
data(iris)
?iris
mean(iris$Sepal.Length)
colMeans(iris)
rowMeans(iris)
apply(iris[,1:4],2,mean)
apply(iris, 1, mean)
data(mtcars)
?mtcars
tapply(mtcars$cyl,mtcars$mpg,mean)
apply(mtcars,2,mean)
sapply(spit(mtcars$mpg,mtcars#cyl),mean)
)
sapply(split(mtcars$mpg,mtcars#cyl),mean)
sapply(split(mtcars$mpg,mtcars$cyl),mean)
sapply(split(mtcars$hp,mtcars$cyl),mean)
hpbycyl <- sapply(split(mtcars$hp,mtcars$cyl),mean)
hpbycyl
hpbycyl[4]
hpbycyl$4
hpbycyl[1]
hpbycyl[3]-hpbycyl[1]
debug(ls)
ls
1
debug(ls)
ls
browse
?iris
head(Species)
head(iris$Species)
tapply(iris$Sepal.Length,iris$Species,mean)
split(mtcars,cyl,mean)
with(mtcars,tapply(mpg,cyl,mean))
debug(ls)
ls
ls
x <- ls
quit
exit
close browser
quit
leave
?browse
?Browser
?browser
stop
Stop
stop
stop
stop
stop
stop
stop
stop
stop
library(datasets)
data(iris)
apply(iris[,1:4],2,mean)
data(mtcars)
with(mtcars,tapply(mpg,cyl,mean))
with(mtcars,tapply(hp,cyl,mean))
hp <- with(mtcars,tapply(hp,cyl,mean))
hp[3]-hp[1]
