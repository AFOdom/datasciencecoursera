getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
makeVector (1:5)
x <- 1:5
cachemean(x)
makeVector(x)
x <- 1
makeVector(x)
cachemean(x)
x <- numeric(1:5)
x <- numeric(c(1,2,3,4,5))
x <- c(numeric(1), numeric(2))
makeVector(x)
z <- makeVector(1:5)
cachemean(z)
m <- matrix(1:4, nrow=2,ncol=2)
m
solve(m)
mI <- solve(m)
m X mI
m * mI
m %*% mI
makeCacheMatrix <- function(x = matrix()) {
m <- solve(x)
list (solvedMatrix = m)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- x$solvedMatrix
m
}
x <- matrix(1:4, nrow<-2, ncol<-2)
makeCacheMatrix(x)
mS <- makeCacheMatrix(x)
cacheSolve(mS)
makeCacheMatrix()
mS <- makeCacheMatrix()
cacheSolve(ms)
cacheSolve(mS)
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
inverse <- solve(x)
get <- function() x
setInverse <- function(inverse) m <<- solve(x)
list (set=set,get=get,solvedMatrix = inverse)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
inverse <- x$solvedMatrix
if(!is.null(inverse)) {
message("getting cached data")
return(inverse)
}
data <- x$get()
inverse <- solve(data)
x$setInverse(inverse)
inverse
}
mS <- makeCacheMatrix()
makeCacheMatrix <- function(x = matrix()) {
inverse <- solve(x)
get <- function() x
setInverse <- function(inverse) m <<- solve(x)
list (get=get,solvedMatrix = inverse)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
inverse <- x$solvedMatrix
if(!is.null(inverse)) {
message("getting cached data")
return(inverse)
}
data <- x$get()
inverse <- solve(data)
x$setInverse(inverse)
inverse
}
mS <- makeCacheMatrix()
cacheSolve(mS)
mS <- makeCacheMatrix(x)
mS
cacheSolve(mS)
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
inverse <- x$solvedMatrix
if(!is.null(inverse)) {
message("getting cached data")
return(inverse)
}
data <- x$get()
print(paste("Data is", data, sep=" "))
inverse <- solve(data)
x$setInverse(inverse)
inverse
}
cacheSolve(mS)
mS <- makeCacheMatrix()
cacheSolve(mS)
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
inverse <- solve(x)
get <- function() x
setInverse <- function(inverse) m <<- solve(x)
list (get=get,solvedMatrix = inverse)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
inverse <- x$solvedMatrix
if(!is.null(inverse)) {
message("getting cached data")
return(inverse)
}
data <- x$get()
print(paste("Data is", data, sep=" "))
inverse <- solve(data)
x$setInverse(inverse)
inverse
}
mS <- makeCacheMatrix()
cacheSolve(mS)
makeCacheMatrix <- function(x = matrix()) {
inverse <- NULL
inverse <- solve(x)
get <- function() x
setInverse <- function(inverse) m <<- solve(x)
list (get=get,solvedMatrix = inverse)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
inverse <- x$solvedMatrix
if(!is.null(inverse)) {
message("getting cached data")
return(inverse)
}
data <- x$get()
print(paste("Data is", data, sep=" "))
inverse <- solve(data)
x$setInverse(inverse)
inverse
}
mS <- makeCacheMatrix()
cacheSolve(mS)
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
inverse <- NULL
#inverse <- solve(x)
get <- function() x
setInverse <- function(inverse) m <<- solve(x)
list (get=get,solvedMatrix = inverse)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
inverse <- x$solvedMatrix
if(!is.null(inverse)) {
message("getting cached data")
return(inverse)
}
data <- x$get()
print(paste("Data is", data, sep=" "))
inverse <- solve(data)
x$setInverse(inverse)
inverse
}
mS <- makeCacheMatrix()
cacheSolve(mS)
makeCacheMatrix <- function(x = matrix()) {
inverse <- NULL
#inverse <- solve(x)
set <- function(y) {
x <<- y
inverse <<- NULL
}
get <- function() x
setInverse <- function(inverse) m <<- solve(x)
list (get=get,solvedMatrix = inverse)
}
cacheSolve(mS)
mS <- makeCacheMatrix()
cacheSolve(mS)
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
inverse <- NULL
#inverse <- solve(x)
get <- function() x
setInverse <- function(inverse) m <<- solve(x)
list (get=get,solvedMatrix = inverse, setInverse = setInverse)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
inverse <- x$solvedMatrix()
if(!is.null(inverse)) {
message("getting cached data")
return(inverse)
}
data <- x$get()
print(paste("Data is", data, sep=" "))
inverse <- solve(data)
print(paste("inverse is",inverse, sep=""))
x$setInverse(inverse)
inverse
}
mS <- makeCacheMatrix()
cacheSolve(mS)
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
inverse <- NULL
#inverse <- solve(x)
get <- function() x
setInverse <- function(inverse) m <<- solve(x)
list (get=get,solvedMatrix = inverse, setInverse = setInverse)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
inverse <- x$solvedMatrix
if(!is.null(inverse)) {
message("getting cached data")
return(inverse)
}
data <- x$get()
print(paste("Data is", data, sep=" "))
inverse <- solve(data)
print(paste("inverse is",inverse, sep=""))
x$setInverse(inverse)
inverse
}
mS <- makeCacheMatrix()
cacheSolve(mS)
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
inverse <- x$solvedMatrix
if(!is.null(inverse)) {
message("getting cached data")
return(inverse)
}
data <- x$get
print(paste("Data is", data, sep=" "))
inverse <- solve(data)
print(paste("inverse is",inverse, sep=""))
x$setInverse(inverse)
inverse
}
mS <- makeCacheMatrix()
cacheSolve(mS)
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
inverse <- x$solvedMatrix
if(!is.null(inverse)) {
message("getting cached data")
return(inverse)
}
data <- x$get
print(data)
inverse <- solve(data)
print(paste("inverse is",inverse, sep=""))
x$setInverse(inverse)
inverse
}
mS <- makeCacheMatrix()
cacheSolve(mS)
x = 2
get = function (x)
get <- function()x
get()
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
inverse <- NULL
#inverse <- solve(x)
get <- function() x
setInverse <- function(inverse) m <<- solve(x)
list (get=get(),solvedMatrix = inverse, setInverse = setInverse(inverse))
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
inverse <- x$solvedMatrix
if(!is.null(inverse)) {
message("getting cached data")
return(inverse)
}
data <- x$get()
print(data)
inverse <- solve(data)
print(paste("inverse is",inverse, sep=""))
x$setInverse(inverse)
inverse
}
mS <- makeCacheMatrix()
cacheSolve(mS)
mS <- makeCacheMatrix(1:4,nrow=2,ncol=2)
testmatrix <- matrix(1:4,nrow=2,ncol=2)
mS <- makeCacheMatrix(testmatrix)
cacheSolve(mS)
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
inverse <- NULL
get <- function() x
setInverse <- function(inverse) m <- solve(x)
list (get=get,solvedMatrix = inverse, setInverse = setInverse(inverse))
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
inverse <- x$solvedMatrix
if(!is.null(inverse)) {
message("getting cached data")
return(inverse)
}
data <- x$get
print(data)
inverse <- x$setInverse(data)
print(paste("inverse is",inverse, sep=""))
inverse
}
mS <- makeCacheMatrix(testmatrix)
cacheSolve(mS)
answer <- cacheSolve(mS)
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
v <- makeVector()
cachemean <- v
cachemean(v)
v <- makeVector()
cachemean(v)
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
cachemean(v)
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setinverse <- function(solve) m <<- solve(x)
getinverse <- function() m
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
cachesolve <- function(x, ...) {
m <- x$getinverse()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data)
x$setmean(m)
m
}
m <- makeCacheMatrix(testmatrix)
cachesolve(m)
m
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setinverse <- function(solve) m <<- solve
getinverse <- function() m
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
cachesolve <- function(x, ...) {
print("calling x$getinverse")
m <- x$getinverse()
print("testing if m is null")
if(!is.null(m)) {
message("getting cached data")
return(m)
}
print("calling x$get")
data <- x$get()
print("solving data")
m <- solve(data)
print("calling x$setinverse")
x$setinverse(m)
print("returning m")
m
}
testmatrix
inversematrix <- makeCacheMatrix(testmatrix)
inversematrix
cachesolve(inverseMatrix)
cahcesolve(inversematrix)
cachesolve(inversematrix)
inversematrix <- makeCacheMatrix(NULL)
cachesolve(inversematrix)
inversematrix <- makeCacheMatrix()
cachesolve(inversematrix)
# Given a matrix, return a list of functions for getting and setting
# the inverse of that matrix.
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
# sets x equal to the argument of "set()" and m to NULL at the parent
# level, so the variables can be accessed by other child functions with
# the same parent.
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x # just returns x
# assigns solve() function to m at the parent level, so m can be
# used by other functions
setinverse <- function(solve) m <<- solve
getinverse <- function() m # just returns m
# puts all the functions we just created into a list and returns
# that list to give other functions access to them
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
# The x argument for cachesolve() should be the list of functions returned
# by makeCacheMatrix(). cachesolve() will return the inverse of the matrix
# cached in makeCacheMatrix().
cachesolve <- function(x, ...) {
# get the inverse matrix using the getinverse() function
# stored in x
m <- x$getinverse()
# if m is not null, let the user know the function is getting
# cached data. Return the cached data. End the function.
if(!is.null(m)) {
message("getting cached data")
return(m)
}
# if m *is* null, assign the result of the get() function stored
# in x to get the original matrix passed into makeCacheMatrix().
data <- x$get()
# get the inverse of that matrix
m <- solve(data)
# use the setinverse() function in x to set the variable
# m to the inverse of data at the parent level, so all child functions
# of this parent have access to its contents.
x$setinverse(m)
# return the inverse
m
}
inversematrix <- makeCacheMatrix()
cachesolve(inversematrix)
inversematrix <- makeCacheMatrix(testmatrix)
cachesolve(inversematrix)
